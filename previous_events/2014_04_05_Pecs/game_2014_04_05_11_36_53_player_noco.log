[Sat Apr  5 11:37:12 2014] 127.0.0.1:45163 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45166 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45169 [200]: /player_service.php
 - <!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>TypeError at &#x2F;</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>TypeError</strong> at <strong>&#x2F;
          </strong></h1>
        <h2>no implicit conversion of nil into String</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            common.rb</code></li>
          <li><strong>location:</strong> <code>initialize
            </code></li>
          <li class="last"><strong>line:
            </strong> 155</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;2.1.0&#x2F;json&#x2F;common.rb</code> in
                <code><strong>initialize</strong></code>
            </li>

            <li class="code app">
              
              <ol start="148"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>  #   the default.
</code></li>
                
                <li class="pre-context-line"><code>  # * *create_additions*: If set to false, the Parser doesn&#x27;t create
</code></li>
                
                <li class="pre-context-line"><code>  #   additions even if a matching class and create_id was found. This option
</code></li>
                
                <li class="pre-context-line"><code>  #   defaults to true.
</code></li>
                
                <li class="pre-context-line"><code>  # * *object_class*: Defaults to Hash
</code></li>
                
                <li class="pre-context-line"><code>  # * *array_class*: Defaults to Array
</code></li>
                
                <li class="pre-context-line"><code>  def parse(source, opts = {})
</code></li>
                
              </ol>
              

              <ol start="155" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>    Parser.new(source, opts).parse</code></li>
              </ol>

              
              <ol start="156" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  # Parse the JSON document _source_ into a Ruby data structure and return it.
</code></li>
                
                <li class="post-context-line"><code>  # The bang version of the parse method defaults to the more dangerous values
</code></li>
                
                <li class="post-context-line"><code>  # for the _opts_ hash, so be sure only to parse trusted _source_ documents.
</code></li>
                
                <li class="post-context-line"><code>  #
</code></li>
                
                <li class="post-context-line"><code>  # _opts_ can have the following keys:
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;2.1.0&#x2F;json&#x2F;common.rb</code> in
                <code><strong>new</strong></code>
            </li>

            <li class="code app">
              
              <ol start="148"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>  #   the default.
</code></li>
                
                <li class="pre-context-line"><code>  # * *create_additions*: If set to false, the Parser doesn&#x27;t create
</code></li>
                
                <li class="pre-context-line"><code>  #   additions even if a matching class and create_id was found. This option
</code></li>
                
                <li class="pre-context-line"><code>  #   defaults to true.
</code></li>
                
                <li class="pre-context-line"><code>  # * *object_class*: Defaults to Hash
</code></li>
                
                <li class="pre-context-line"><code>  # * *array_class*: Defaults to Array
</code></li>
                
                <li class="pre-context-line"><code>  def parse(source, opts = {})
</code></li>
                
              </ol>
              

              <ol start="155" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>    Parser.new(source, opts).parse</code></li>
              </ol>

              
              <ol start="156" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  # Parse the JSON document _source_ into a Ruby data structure and return it.
</code></li>
                
                <li class="post-context-line"><code>  # The bang version of the parse method defaults to the more dangerous values
</code></li>
                
                <li class="post-context-line"><code>  # for the _opts_ hash, so be sure only to parse trusted _source_ documents.
</code></li>
                
                <li class="post-context-line"><code>  #
</code></li>
                
                <li class="post-context-line"><code>  # _opts_ can have the following keys:
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;2.1.0&#x2F;json&#x2F;common.rb</code> in
                <code><strong>parse</strong></code>
            </li>

            <li class="code app">
              
              <ol start="148"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>  #   the default.
</code></li>
                
                <li class="pre-context-line"><code>  # * *create_additions*: If set to false, the Parser doesn&#x27;t create
</code></li>
                
                <li class="pre-context-line"><code>  #   additions even if a matching class and create_id was found. This option
</code></li>
                
                <li class="pre-context-line"><code>  #   defaults to true.
</code></li>
                
                <li class="pre-context-line"><code>  # * *object_class*: Defaults to Hash
</code></li>
                
                <li class="pre-context-line"><code>  # * *array_class*: Defaults to Array
</code></li>
                
                <li class="pre-context-line"><code>  def parse(source, opts = {})
</code></li>
                
              </ol>
              

              <ol start="155" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>    Parser.new(source, opts).parse</code></li>
              </ol>

              
              <ol start="156" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  # Parse the JSON document _source_ into a Ruby data structure and return it.
</code></li>
                
                <li class="post-context-line"><code>  # The bang version of the parse method defaults to the more dangerous values
</code></li>
                
                <li class="post-context-line"><code>  # for the _opts_ hash, so be sure only to parse trusted _source_ documents.
</code></li>
                
                <li class="post-context-line"><code>  #
</code></li>
                
                <li class="post-context-line"><code>  # _opts_ can have the following keys:
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>ranking_service&#x2F;ranking_service.rb</code> in
                <code><strong>block in &lt;main&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="3"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>require &quot;json&quot;
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>set :port, 2048
</code></li>
                
                <li class="pre-context-line"><code>set :bind, &#x27;0.0.0.0&#x27;
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>post &quot;&#x2F;&quot; do
</code></li>
                
              </ol>
              

              <ol start="10" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>  cards = JSON.parse(request[:cards])</code></li>
              </ol>

              
              <ol start="11" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>  if cards.length &gt;= 5
</code></li>
                
                <li class="post-context-line"><code>    JSON.generate PokerRanking::Hand.new(cards).data
</code></li>
                
                <li class="post-context-line"><code>  else
</code></li>
                
                <li class="post-context-line"><code>    JSON.generate error: &quot;Not enough cards&quot;
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1586"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
                <li class="pre-context-line"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :
</code></li>
                
              </ol>
              

              <ol start="1593" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>          proc { |a,p| unbound_method.bind(a).call }</code></li>
              </ol>

              
              <ol start="1594" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1586"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>        method_name             = &quot;#{verb} #{path}&quot;
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = generate_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile path
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        wrapper                 = block.arity != 0 ?
</code></li>
                
                <li class="pre-context-line"><code>          proc { |a,p| unbound_method.bind(a).call(*p) } :
</code></li>
                
              </ol>
              

              <ol start="1593" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>          proc { |a,p| unbound_method.bind(a).call }</code></li>
              </ol>

              
              <ol start="1594" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>        wrapper.instance_variable_set(:@route_name, method_name)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        [ pattern, keys, conditions, wrapper ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>[]</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="950"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="957" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="958" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (3 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="950"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="957" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="958" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="969"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval
</code></li>
                
              </ol>
              

              <ol start="976" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>      throw :halt, yield</code></li>
              </ol>

              
              <ol start="977" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (2 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="950"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="pre-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
              </ol>
              

              <ol start="957" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>            route_eval { block[*args] }</code></li>
              </ol>

              
              <ol start="958" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="990"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
              </ol>
              

              <ol start="997" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>        block ? block[self, values] : yield(self, values)</code></li>
              </ol>

              
              <ol start="998" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="988"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="995" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="996" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="988"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>      values += match.captures.map! { |v| force_encoding URI_INSTANCE.unescape(v) if v }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if values.any?
</code></li>
                
                <li class="pre-context-line"><code>        original, @params = params, params.merge(&#x27;splat&#x27; =&gt; [], &#x27;captures&#x27; =&gt; values)
</code></li>
                
                <li class="pre-context-line"><code>        keys.zip(values) { |k,v| Array === @params[k] ? @params[k] &lt;&lt; v : @params[k] = v if v }
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="995" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>      catch(:pass) do</code></li>
              </ol>

              
              <ol start="996" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>        conditions.each { |c| throw :pass if c.bind(self).call == false }
</code></li>
                
                <li class="post-context-line"><code>        block ? block[self, values] : yield(self, values)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = original if original
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="948"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="955" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|</code></li>
              </ol>

              
              <ol start="956" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="947"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="954" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="955" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="947"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |args| process_route(*args) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block = nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="954" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="955" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>          returned_pass_block = process_route(pattern, keys, conditions) do |*args|
</code></li>
                
                <li class="post-context-line"><code>            env[&#x27;sinatra.route&#x27;] = block.instance_variable_get(:@route_name)
</code></li>
                
                <li class="post-context-line"><code>            route_eval { block[*args] }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # don&#x27;t wipe out pass_block in superclass
</code></li>
                
                <li class="post-context-line"><code>          pass_block = returned_pass_block if returned_pass_block
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1060"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      invoke do
</code></li>
                
                <li class="pre-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>        filter! :before
</code></li>
                
              </ol>
              

              <ol start="1067" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>        route!</code></li>
              </ol>

              
              <ol start="1068" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      begin
</code></li>
                
                <li class="post-context-line"><code>        filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>      rescue ::Exception =&gt; boom
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1057"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>        body res
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>      nil # avoid double setting the same response tuple twice
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
              </ol>
              

              <ol start="1064" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      invoke do</code></li>
              </ol>

              
              <ol start="1065" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>        static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="post-context-line"><code>        filter! :before
</code></li>
                
                <li class="post-context-line"><code>        route!
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      invoke { handle_exception!(boom) }
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="882"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="889" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="890" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1042"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke
</code></li>
                
              </ol>
              

              <ol start="1049" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>      res = catch(:halt) { yield }</code></li>
              </ol>

              
              <ol start="1050" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>      res = [res] if Fixnum === res or String === res
</code></li>
                
                <li class="post-context-line"><code>      if Array === res and Fixnum === res.first
</code></li>
                
                <li class="post-context-line"><code>        res = res.dup
</code></li>
                
                <li class="post-context-line"><code>        status(res.shift)
</code></li>
                
                <li class="post-context-line"><code>        body(res.pop)
</code></li>
                
                <li class="post-context-line"><code>        headers(*res)
</code></li>
                
                <li class="post-context-line"><code>      elsif res.respond_to? :each
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="882"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="889" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="890" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) } unless @env[&#x27;sinatra.error&#x27;]
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if Array === body and body[0].respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body[0].content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="870"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="877" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="878" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="post-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;xss_header.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Options:
</code></li>
                
                <li class="pre-context-line"><code>    # xss_mode:: How the browser should prevent the attack (default: :block)
</code></li>
                
                <li class="pre-context-line"><code>    class XSSHeader &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      default_options :xss_mode =&gt; :block, :nosniff =&gt; true
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>        status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-XSS-Protection&#x27;]       ||= &quot;1; mode=#{options[:xss_mode]}&quot; if html? headers
</code></li>
                
                <li class="post-context-line"><code>        headers[&#x27;X-Content-Type-Options&#x27;] ||= &#x27;nosniff&#x27;                       if options[:nosniff]
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;path_traversal.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="9"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    # Unescapes &#x27;&#x2F;&#x27; and &#x27;.&#x27;, expands +path_info+.
</code></li>
                
                <li class="pre-context-line"><code>    # Thus &lt;tt&gt;GET &#x2F;foo&#x2F;%2e%2e%2fbar&lt;&#x2F;tt&gt; becomes &lt;tt&gt;GET &#x2F;bar&lt;&#x2F;tt&gt;.
</code></li>
                
                <li class="pre-context-line"><code>    class PathTraversal &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        path_was         = env[&quot;PATH_INFO&quot;]
</code></li>
                
                <li class="pre-context-line"><code>        env[&quot;PATH_INFO&quot;] = cleanup path_was if path_was &amp;&amp; !path_was.empty?
</code></li>
                
              </ol>
              

              <ol start="16" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>        app.call env</code></li>
              </ol>

              
              <ol start="17" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        env[&quot;PATH_INFO&quot;] = path_was
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def cleanup(path)
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to?(:encoding)
</code></li>
                
                <li class="post-context-line"><code>          # Ruby 1.9+ M17N
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;json_csrf.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="11"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>    # Array prototype has been patched to track data. Checks the referrer
</code></li>
                
                <li class="pre-context-line"><code>    # even on GET requests if the content type is JSON.
</code></li>
                
                <li class="pre-context-line"><code>    class JsonCsrf &lt; Base
</code></li>
                
                <li class="pre-context-line"><code>      alias react deny
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        request               = Request.new(env)
</code></li>
                
              </ol>
              

              <ol start="18" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>        status, headers, body = app.call(env)</code></li>
              </ol>

              
              <ol start="19" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if has_vector? request, headers
</code></li>
                
                <li class="post-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="post-context-line"><code>          react(env) or [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="43"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="50" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="51" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="43"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        unless accepts? env
</code></li>
                
                <li class="pre-context-line"><code>          warn env, &quot;attack prevented by #{self.class}&quot;
</code></li>
                
                <li class="pre-context-line"><code>          instrument env
</code></li>
                
                <li class="pre-context-line"><code>          result = react env
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
              </ol>
              

              <ol start="50" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>        result or app.call(env)</code></li>
              </ol>

              
              <ol start="51" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def react(env)
</code></li>
                
                <li class="post-context-line"><code>        result = send(options[:reaction], env)
</code></li>
                
                <li class="post-context-line"><code>        result if Array === result and result.size == 3
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-protection-1.5.2&#x2F;lib&#x2F;rack&#x2F;protection&#x2F;frame_options.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="24"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options]
</code></li>
                
                <li class="pre-context-line"><code>          frame_options = options[:frame_options].to_s.upcase unless frame_options.respond_to? :to_str
</code></li>
                
                <li class="pre-context-line"><code>          frame_options.to_str
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="31" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>        status, headers, body        = @app.call(env)</code></li>
              </ol>

              
              <ol start="32" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>        headers[&#x27;X-Frame-Options&#x27;] ||= frame_options if html? headers
</code></li>
                
                <li class="post-context-line"><code>        [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;logger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="8"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      logger = ::Logger.new(env[&#x27;rack.errors&#x27;])
</code></li>
                
                <li class="pre-context-line"><code>      logger.level = @level
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      env[&#x27;rack.logger&#x27;] = logger
</code></li>
                
              </ol>
              

              <ol start="15" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="16" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;commonlogger.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="26"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>    def initialize(app, logger=nil)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @logger = logger
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
                <li class="pre-context-line"><code>      began_at = Time.now
</code></li>
                
              </ol>
              

              <ol start="33" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>      status, header, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="34" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>      header = Utils::HeaderHash.new(header)
</code></li>
                
                <li class="post-context-line"><code>      body = BodyProxy.new(body) { log(env, status, header, began_at) }
</code></li>
                
                <li class="post-context-line"><code>      [status, header, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="210"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="pre-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
                <li class="pre-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
              </ol>
              

              <ol start="217" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>        call_without_check(env)</code></li>
              </ol>

              
              <ol start="218" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  class NotFound &lt; NameError #:nodoc:
</code></li>
                
                <li class="post-context-line"><code>    def http_status; 404 end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="203"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  # Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,
</code></li>
                
                <li class="pre-context-line"><code>  # if another CommonLogger is already in the middleware chain.
</code></li>
                
                <li class="pre-context-line"><code>  class CommonLogger &lt; Rack::CommonLogger
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="210" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>      env[&#x27;sinatra.commonlogger&#x27;] ? @app.call(env) : super</code></li>
              </ol>

              
              <ol start="211" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    superclass.class_eval do
</code></li>
                
                <li class="post-context-line"><code>      alias call_without_check call unless method_defined? :call_without_check
</code></li>
                
                <li class="post-context-line"><code>      def call(env)
</code></li>
                
                <li class="post-context-line"><code>        env[&#x27;sinatra.commonlogger&#x27;] = true
</code></li>
                
                <li class="post-context-line"><code>        call_without_check(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="4"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>  # Rack::Head returns an empty body for all HEAD requests. It leaves
</code></li>
                
                <li class="pre-context-line"><code>  # all other requests unchanged.
</code></li>
                
                <li class="pre-context-line"><code>  def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>    @app = app
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  def call(env)
</code></li>
                
              </ol>
              

              <ol start="11" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>    status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="12" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    if env[&quot;REQUEST_METHOD&quot;] == &quot;HEAD&quot;
</code></li>
                
                <li class="post-context-line"><code>      body.close if body.respond_to? :close
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, []]
</code></li>
                
                <li class="post-context-line"><code>    else
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;rack-1.5.2&#x2F;lib&#x2F;rack&#x2F;methodoverride.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="14"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>        method = method_override(env)
</code></li>
                
                <li class="pre-context-line"><code>        if HTTP_METHODS.include?(method)
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;rack.methodoverride.original_method&quot;] = env[&quot;REQUEST_METHOD&quot;]
</code></li>
                
                <li class="pre-context-line"><code>          env[&quot;REQUEST_METHOD&quot;] = method
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="21" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="22" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def method_override(env)
</code></li>
                
                <li class="post-context-line"><code>      req = Request.new(env)
</code></li>
                
                <li class="post-context-line"><code>      method = req.POST[METHOD_OVERRIDE_PARAM_KEY] ||
</code></li>
                
                <li class="post-context-line"><code>        env[HTTP_METHOD_OVERRIDE_HEADER]
</code></li>
                
                <li class="post-context-line"><code>      method.to_s.upcase
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;show_exceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="14"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app      = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="21" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="22" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      errors, env[&quot;rack.errors&quot;] = env[&quot;rack.errors&quot;], @@eats_errors
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if prefers_plain_text?(env)
</code></li>
                
                <li class="post-context-line"><code>        content_type = &quot;text&#x2F;plain&quot;
</code></li>
                
                <li class="post-context-line"><code>        body = [dump_exception(e)]
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="173"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>  # Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however,
</code></li>
                
                <li class="pre-context-line"><code>  # some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.
</code></li>
                
                <li class="pre-context-line"><code>  # This middleware will detect an extended body object and will make sure it reaches the
</code></li>
                
                <li class="pre-context-line"><code>  # handler directly. We do this here, so our middleware and middleware set up by the app will
</code></li>
                
                <li class="pre-context-line"><code>  # still be able to run.
</code></li>
                
                <li class="pre-context-line"><code>  class ExtendedRack &lt; Struct.new(:app)
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="180" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>      result, callback = app.call(env), env[&#x27;async.callback&#x27;]</code></li>
              </ol>

              
              <ol start="181" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
                <li class="post-context-line"><code>      return result unless callback and async?(*result)
</code></li>
                
                <li class="post-context-line"><code>      after_response { callback.call result }
</code></li>
                
                <li class="post-context-line"><code>      setup_close(env, *result)
</code></li>
                
                <li class="post-context-line"><code>      throw :async
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1997"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def helpers
</code></li>
                
                <li class="pre-context-line"><code>      @instance
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="2004" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>      @stack.call(env)</code></li>
              </ol>

              
              <ol start="2005" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def inspect
</code></li>
                
                <li class="post-context-line"><code>      &quot;#&lt;#{@instance.class} app_file=#{settings.app_file.inspect}&gt;&quot;
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1462"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1469" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1470" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1771"
                  class="pre-context" id="pre-44"
                  onclick="toggle(44);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1778" class="context" id="44"
                  onclick="toggle(44);">
                <li class="context-line" id="context-44"><code>          yield</code></li>
              </ol>

              
              <ol start="1779" class="post-context"
                  id="post-44" onclick="toggle(44);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # used for deprecation warnings
</code></li>
                
                <li class="post-context-line"><code>      def warn(message)
</code></li>
                
                <li class="post-context-line"><code>        super message + &quot;\n\tfrom #{cleaned_caller.first.join(&#x27;:&#x27;)}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;sinatra-1.4.4&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1462"
                  class="pre-context" id="pre-45"
                  onclick="toggle(45);">
                
                <li class="pre-context-line"><code>        setup_default_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        setup_middleware builder
</code></li>
                
                <li class="pre-context-line"><code>        builder.run app
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1469" class="context" id="45"
                  onclick="toggle(45);">
                <li class="context-line" id="context-45"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1470" class="post-context"
                  id="post-45" onclick="toggle(45);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Like Kernel#caller but excluding certain magic entries and without
</code></li>
                
                <li class="post-context-line"><code>      # line &#x2F; method information; the resulting array contains filenames only.
</code></li>
                
                <li class="post-context-line"><code>      def caller_files
</code></li>
                
                <li class="post-context-line"><code>        cleaned_caller(1).flatten
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;thin-1.6.2&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>block in pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="79"
                  class="pre-context" id="pre-46"
                  onclick="toggle(46);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
                <li class="pre-context-line"><code>      catch(:async) do
</code></li>
                
                <li class="pre-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
              </ol>
              

              <ol start="86" class="context" id="46"
                  onclick="toggle(46);">
                <li class="context-line" id="context-46"><code>        response = @app.call(@request.env)</code></li>
              </ol>

              
              <ol start="87" class="post-context"
                  id="post-46" onclick="toggle(46);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
                <li class="post-context-line"><code>      can_persist? &amp;&amp; @request.persistent? ? Response::PERSISTENT_ERROR : Response::ERROR
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;thin-1.6.2&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-47"
                  onclick="toggle(47);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="47"
                  onclick="toggle(47);">
                <li class="context-line" id="context-47"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-47" onclick="toggle(47);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;thin-1.6.2&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-48"
                  onclick="toggle(48);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="48"
                  onclick="toggle(48);">
                <li class="context-line" id="context-48"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-48" onclick="toggle(48);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      unexpected_error(e)
</code></li>
                
                <li class="post-context-line"><code>      # Pass through error response
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;eventmachine-1.0.3&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1030"
                  class="pre-context" id="pre-49"
                  onclick="toggle(49);">
                
                <li class="pre-context-line"><code>  # @private
</code></li>
                
                <li class="pre-context-line"><code>  def self.spawn_threadpool
</code></li>
                
                <li class="pre-context-line"><code>    until @threadpool.size == @threadpool_size.to_i
</code></li>
                
                <li class="pre-context-line"><code>      thread = Thread.new do
</code></li>
                
                <li class="pre-context-line"><code>        Thread.current.abort_on_exception = true
</code></li>
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          op, cback = *@threadqueue.pop
</code></li>
                
              </ol>
              

              <ol start="1037" class="context" id="49"
                  onclick="toggle(49);">
                <li class="context-line" id="context-49"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1038" class="post-context"
                  id="post-49" onclick="toggle(49);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;Users&#x2F;yenshirak&#x2F;.rbenv&#x2F;versions&#x2F;2.1.1&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.1.0&#x2F;gems&#x2F;eventmachine-1.0.3&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>block in spawn_threadpool</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1030"
                  class="pre-context" id="pre-50"
                  onclick="toggle(50);">
                
                <li class="pre-context-line"><code>  # @private
</code></li>
                
                <li class="pre-context-line"><code>  def self.spawn_threadpool
</code></li>
                
                <li class="pre-context-line"><code>    until @threadpool.size == @threadpool_size.to_i
</code></li>
                
                <li class="pre-context-line"><code>      thread = Thread.new do
</code></li>
                
                <li class="pre-context-line"><code>        Thread.current.abort_on_exception = true
</code></li>
                
                <li class="pre-context-line"><code>        while true
</code></li>
                
                <li class="pre-context-line"><code>          op, cback = *@threadqueue.pop
</code></li>
                
              </ol>
              

              <ol start="1037" class="context" id="50"
                  onclick="toggle(50);">
                <li class="context-line" id="context-50"><code>          result = op.call</code></li>
              </ol>

              
              <ol start="1038" class="post-context"
                  id="post-50" onclick="toggle(50);">
                
                <li class="post-context-line"><code>          @resultqueue &lt;&lt; [result, cback]
</code></li>
                
                <li class="post-context-line"><code>          EventMachine.signal_loopbreak
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      @threadpool &lt;&lt; thread
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    @all_threads_spawned = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <table class="req">
          <tr>
            <th>Variable</th>
            <th>Value</th>
          </tr>
          
          <tr>
            <td>{&quot;cards&quot;:</td>
            <td class="code"><div>{&quot;{\&quot;rank\&quot;:\&quot;9\&quot;,\&quot;suit\&quot;:\&quot;diamonds\&quot;},{\&quot;rank\&quot;:\&quot;Q\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;2\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;8\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;2\&quot;,\&quot;suit\&quot;:\&quot;spades\&quot;}&quot;=&gt;{&quot;}&quot;=&gt;nil}}</div></td>
          </tr>
          
        </table>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <p class="no-data">No cookie data.</p>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>CONTENT_LENGTH</td>
           <td class="code"><div>155</div></td>
         </tr>
         
         <tr>
           <td>CONTENT_TYPE</td>
           <td class="code"><div>application&#x2F;x-www-form-urlencoded</div></td>
         </tr>
         
         <tr>
           <td>GATEWAY_INTERFACE</td>
           <td class="code"><div>CGI&#x2F;1.2</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT</td>
           <td class="code"><div>*&#x2F;*</div></td>
         </tr>
         
         <tr>
           <td>HTTP_HOST</td>
           <td class="code"><div>192.168.57.181:2048</div></td>
         </tr>
         
         <tr>
           <td>HTTP_VERSION</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>&#x2F;</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REMOTE_ADDR</td>
           <td class="code"><div>192.168.57.138</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>POST</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_PATH</td>
           <td class="code"><div>&#x2F;</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_URI</td>
           <td class="code"><div>&#x2F;</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>192.168.57.181</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>2048</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PROTOCOL</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>SERVER_SOFTWARE</td>
           <td class="code"><div>thin 1.6.2 codename Doc Brown</div></td>
         </tr>
         
         <tr>
           <td>async.callback</td>
           <td class="code"><div>#&lt;Method: Thin::Connection#post_process&gt;</div></td>
         </tr>
         
         <tr>
           <td>async.close</td>
           <td class="code"><div>#&lt;EventMachine::DefaultDeferrable:0x007fad9337b0e8&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;Object:0x007fad93611870&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x007fad933802c8&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.logger</td>
           <td class="code"><div>#&lt;Logger:0x007fad93373668 @progname=nil, @level=1, @default_formatter=#&lt;Logger::Formatter:0x007fad93373640 @datetime_format=nil&gt;, @formatter=nil, @logdev=#&lt;Logger::LogDevice:0x007fad93373500 @shift_size=nil, @shift_age=nil, @filename=nil, @dev=#&lt;IO:&lt;STDERR&gt;&gt;, @mutex=#&lt;Logger::LogDevice::LogDeviceMutex:0x007fad933734d8 @mon_owner=nil, @mon_count=0, @mon_mutex=#&lt;Mutex:0x007fad93373488&gt;&gt;&gt;&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.form_hash</td>
           <td class="code"><div>{&quot;{\&quot;cards\&quot;:&quot;=&gt;{&quot;{\&quot;rank\&quot;:\&quot;9\&quot;,\&quot;suit\&quot;:\&quot;diamonds\&quot;},{\&quot;rank\&quot;:\&quot;Q\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;2\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;8\&quot;,\&quot;suit\&quot;:\&quot;clubs\&quot;},{\&quot;rank\&quot;:\&quot;2\&quot;,\&quot;suit\&quot;:\&quot;spades\&quot;}&quot;=&gt;{&quot;}&quot;=&gt;nil}}}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.form_input</td>
           <td class="code"><div>#&lt;StringIO:0x007fad933802c8&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.request.form_vars</td>
           <td class="code"><div>{&quot;cards&quot;:[{&quot;rank&quot;:&quot;9&quot;,&quot;suit&quot;:&quot;diamonds&quot;},{&quot;rank&quot;:&quot;Q&quot;,&quot;suit&quot;:&quot;clubs&quot;},{&quot;rank&quot;:&quot;2&quot;,&quot;suit&quot;:&quot;clubs&quot;},{&quot;rank&quot;:&quot;8&quot;,&quot;suit&quot;:&quot;clubs&quot;},{&quot;rank&quot;:&quot;2&quot;,&quot;suit&quot;:&quot;spades&quot;}]}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 0]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.accept</td>
           <td class="code"><div>[#&lt;Sinatra::Request::AcceptEntry:0x007fad9336a518 @entry=&quot;*&#x2F;*&quot;, @type=&quot;*&#x2F;*&quot;, @params={}, @q=1.0&gt;]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.commonlogger</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;TypeError: no implicit conversion of nil into String&gt;</div></td>
         </tr>
         
         <tr>
           <td>sinatra.route</td>
           <td class="code"><div>POST &#x2F;</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45171 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45175 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45180 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45185 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45190 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45195 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45200 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45205 [200]: /player_service.php
[Sat Apr  5 11:37:12 2014] 127.0.0.1:45210 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45215 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45220 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45225 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45230 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45235 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45240 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45245 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45250 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45255 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45260 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45265 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45270 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45275 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45280 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45285 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45290 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45295 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45300 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45305 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45309 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45313 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45318 [200]: /player_service.php
[Sat Apr  5 11:37:13 2014] 127.0.0.1:45322 [200]: /player_service.php
